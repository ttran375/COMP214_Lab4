Assignment 5-6: Returning Order Status Information
Create a procedure that returns the most recent order status information for a specified basket.
This procedure should determine the most recent ordering-stage entry in the BB_BASKETSTATUS
table and return the data. Use an IF or CASE clause to return a stage description instead
of an IDSTAGE number, which means little to shoppers. The IDSTAGE column of the
BB_BASKETSTATUS table identifies each stage as follows:
• 1—Submitted and received
• 2—Confirmed, processed, sent to shipping
• 3—Shipped
• 4—Cancelled
• 5—Back-ordered
The procedure should accept a basket ID number and return the most recent status
description and date the status was recorded. If no status is available for the specified basket
ID, return a message stating that no status is available. Name the procedure STATUS_SP. Test
the procedure twice with the basket ID 4 and then 6.
Assignment 5-7: Identifying Customers
Brewbean’s wants to offer an incentive of free shipping to customers who haven’t returned to
the site since a specified date. Create a procedure named PROMO_SHIP_SP that determines
who these customers are and then updates the BB_PROMOLIST table accordingly. The
procedure uses the following information:
• Date cutoff—Any customers who haven’t shopped on the site since this date
should be included as incentive participants. Use the basket creation date to
reflect shopper activity dates.
• Month—A three-character month (such as APR) should be added to the promotion
table to indicate which month free shipping is effective.
• Year—A four-digit year indicates the year the promotion is effective.
• promo_flag—1 represents free shipping.
The BB_PROMOLIST table also has a USED column, which contains the default value N
and is updated to Y when the shopper uses the promotion. Test the procedure with the cutoff
date 15-FEB-12. Assign free shipping for the month APR and the year 2012.
Assignment 5-8: Adding Items to a Basket
As a shopper selects products on the Brewbean’s site, a procedure is needed to add a newly
selected item to the current shopper’s basket. Create a procedure named BASKET_ADD_SP that
accepts a product ID, basket ID, price, quantity, size code option (1 or 2), and form code option
(3 or 4) and uses this information to add a new item to the BB_BASKETITEM table. The table’s
PRIMARY KEY column is generated by BB_IDBASKETITEM_SEQ. Run the procedure with the
following values:
• Basket ID—14
• Product ID—8
• Price—10.80
• Quantity—1
• Size code—2
• Form code—4
Assignment 5-9: Creating a Logon Procedure
The home page of the Brewbean’s Web site has an option for members to log on with their IDs
and passwords. Develop a procedure named MEMBER_CK_SP that accepts the ID and password
as inputs, checks whether they make up a valid logon, and returns the member name and cookie
value. The name should be returned as a single text string containing the first and last name.
The head developer wants the number of parameters minimized so that the same
parameter is used to accept the password and return the name value. Also, if the user doesn’t
enter a valid username and password, return the value INVALID in a parameter named
p_check. Test the procedure using a valid logon first, with the username rat55 and password
kile. Then try it with an invalid logon by changing the username to rat.

Hands-On Assignments Part II
Assignment 5-10: Returning a Record
Create a procedure named DDPROJ_SP that retrieves project information for a specific project
based on a project ID. The procedure should have two parameters: one to accept a project ID
value and another to return all data for the specified project. Use a record variable to have the
procedure return all database column values for the selected project. Test the procedure with an
anonymous block.
Assignment 5-11: Creating a Procedure
Create a procedure named DDPAY_SP that identifies whether a donor currently has an active pledge
with monthly payments. A donor ID is the input to the procedure. Using the donor ID, the procedure
needs to determine whether the donor has any currently active pledges based on the status field
and is on a monthly payment plan. If so, the procedure is to return the Boolean value TRUE.
Otherwise, the value FALSE should be returned. Test the procedure with an anonymous block.
Assignment 5-12: Creating a Procedure
Create a procedure named DDCKPAY_SP that confirms whether a monthly pledge payment is the
correct amount. The procedure needs to accept two values as input: a payment amount and a
pledge ID. Based on these inputs, the procedure should confirm that the payment is the correct
monthly increment amount, based on pledge data in the database. If it isn’t, a custom Oracle error
using error number 20050 and the message “Incorrect payment amount - planned payment = ??”
should be raised. The ?? should be replaced by the correct payment amount. The database
query in the procedure should be formulated so that no rows are returned if the pledge isn’t on
a monthly payment plan or the pledge isn’t found. If the query returns no rows, the procedure should
display the message “No payment information.” Test the procedure with the pledge ID 104 and the
payment amount $25. Then test with the same pledge ID but the payment amount $20. Finally, test
the procedure with a pledge ID for a pledge that doesn’t have monthly payments associated with it.
Assignment 5-13: Creating a Procedure
Create a procedure named DDCKBAL_SP that verifies pledge payment information. The procedure
should accept a pledge ID as input and return three values for the specified pledge: pledge
amount, payment total to date, and remaining balance. Test the procedure with an
anonymous block.
Case Projects
Case 5-1: Using Summary Tables
The Reporting and Analysis Department has a database containing tables that hold summarized
data to make report generation simpler and more efficient. They want to schedule some jobs
to run nightly to update summary tables. Create two procedures to update the following tables
(assuming that existing data in the tables is deleted before these procedures run):
• Create the PROD_SALES_SUM_SP procedure to update the BB_PROD_SALES
table, which holds total sales dollars and total sales quantity by product ID, month,
and year. The order date should be used for the month and year information.
• Create the SHOP_SALES_SUM_SP procedure to update the BB_SHOP_SALES
table, which holds total dollar sales by shopper ID. The total should include only
product amounts—no shipping or tax amounts.
The BB_SHOP_SALES and BB_PROD_SALES tables have already been created. Use the
DESCRIBE command to review their table structures.
Case 5-2: Working with the More Movie Rentals Rental Process
More Movie Rentals is experimenting with a new concept to make rentals more convenient.
Members can request movies via the Internet, or they can check out at a store location. In either
case, a small barcode sticker of the member ID and movie ID is printed at the time of rental. It’s
affixed to a paper slipcase for the movie, which can serve as an envelope. Members can return
a movie by sending it via U.S. Mail or dropping it off at a store location. In either case, the clerk
scans the member ID and movie ID from the slipcase barcodes.
Two procedures are needed to record rentals and returns in the database. Create a
procedure named MOVIE_RENT_SP that adds a new record to the MM_RENTAL table and
updates the movie inventory, which is the MOVIE_QTY column of the MM_MOVIE table. This
procedure should accept a member ID, movie ID, and a payment method. The member ID is
scanned in from a barcode on the membership card, and the movie ID is scanned in from a
barcode on the movie case. The cashier selects the payment type. Test the procedure with
member ID = 13, movie ID = 12, and payment method = 4. Verify that the rental has been
added and the movie inventory has been updated.
The second procedure needs to record the movie’s return. Create a procedure named
MOVIE_RETURN_SP that logs the current date in the CHECKIN_DATE column and updates
the movie inventory. Inputs are the member ID and movie ID from the barcodes on the slipcase,
so the procedure should determine the rental ID first. Test the procedure with member ID = 13
and movie ID = 12.
