-- Hands-On Assignments Part II
-- Assignment 9-9: Tracking Pledge Payment Activity
-- The DoGood Donor organization wants to track all pledge payment activity. Each time a pledge
-- payment is added, changed, or removed, the following information should be captured in a
-- separate table: username (logon), current date, action taken (INSERT, UPDATE, or DELETE),
-- and the idpay value for the payment record. Create a table named DD_PAYTRACK to hold
-- this information. Include a primary key column to be populated by a sequence, and create a
-- new sequence named DD_PTRACK_SEQ for the primary key column. Create a single trigger for
-- recording the requested information to track pledge payment activity, and test the trigger.
-- Assignment 9-10: Identifying First Pledges
-- The DD_PLEDGE table contains the FIRSTPLEDGE column that indicates whether a pledge is
-- the donorâ€™s first pledge. The DoGood Donor organization wants this identification to be
-- automated. Create a trigger that adds the corresponding data to the FIRSTPLEDGE column
-- when a new pledge is added, and test the trigger.
-- Case Projects
-- Case 9-1: Mapping the Flow of Database Triggers
-- After you learn how to create triggers, you realize that one statement can end up firing off a
-- number of triggers. Not only can you have multiple triggers attached to a single table, but also a
-- trigger can perform DML operations that might affect other tables and fire off other triggers. To
-- prevent this problem, you might be able to combine triggers to make your code clearer and
-- easier to maintain. For example, if you have one trigger for an INSERT statement on the
-- BB_PRODUCT table and another for an UPDATE statement on the BB_PRODUCT table, you
-- might want to combine them into one trigger and use conditional predicates. In addition, triggers
-- that run DML statements that could fire off additional triggers could lead to a mutating table
-- error. However, this error might not be apparent unless you identify the flow of trigger
-- processing and associated objects.
-- Review the CREATE TRIGGER statements in the c9case1.txt file in the Chapter09 folder.
-- Prepare a flowchart illustrating which triggers will fire and the firing sequence if a user logs on
-- and issues the following code:
-- UPDATE bb_product
-- SET stock = 50
-- WHERE idProduct = 3;
-- Case 9-2: Processing Inventory for More Movies
-- The More Movies company needs to make sure the quantity of each movie is updated for each
-- rental recorded and returned. The MM_MOVIE table contains the MOVIE_QTY column that
-- reflects the current number of copies in stock for a movie. Create triggers that update the
-- MOVIE_QTY column for rentals (named MM_RENT_TRG) and returns (named MM_RETURN_TRG).
-- Test your triggers with the following DML actions, which add a rental and update it to reflect that
-- it has been returned. Issue queries to confirm that the triggers fired and worked correctly.
-- INSERT INTO mm_rental (rental_id, member_id, movie_id,
-- payment_methods_id)
-- VALUES (13, 10, 6, 2);
-- UPDATE mm_rental
-- SET checkin_date = SYSDATE
-- WHERE rental_id = 13;
